description: >
  Publish a docker and github release for the repo
  In most Dockerfiles, this assumes a binary is built and in the dist directory

executor: default

working_directory: ~/repo

parameters:
  candidate:
    description: "publish candidate image"
    default: true
    type: boolean
  release_name:
    description: "the name to be used for the docker and github releases"
    type: string
  docker:
    description: "whether or not to publish docker containers"
    default: true
    type: boolean
  docker_buildx:
    description: "publish cross-platform builds"
    default: false
    type: boolean
  platforms:
    description: "platforms to publish with buildx"
    default: "linux/arm64"
    type: string
  working_dir:
    description: "current working directory from which to publish from"
    type: string
    default: "~/repo"
  dockerfile_path:
    description: "non-standard path to Dockerfile"
    type: string
    default: "."
  image_name:
    description: "name for docker image if it differs from release_name"
    type: string
    default: ""

steps:
  - checkout
  - attach_workspace:
      at: << parameters.working_dir >>
  - run:
      name: Copy Changelog
      command: |
        if [[ ! -d dist ]]; then
          mkdir dist
        fi

        if [[ -f CHANGELOG.md ]]; then
          cp CHANGELOG.md dist/CHANGELOG.md
        fi
  - when:
      condition: <<parameters.docker>>
      steps:
        - setup_remote_docker
        - run:
            name: Publish to Docker
            environment:
              CANDIDATE: <<# parameters.candidate >>1<</ parameters.candidate >>
              RELEASE_NAME: << parameters.release_name >>
              DOCKERFILE_PATH: << parameters.dockerfile_path >>
              IMAGE_NAME: << parameters.image_name >>
              DOCKER_BUILDX: <<# parameters.docker_buildx >>1<</ parameters.docker_buildx >>
              PLATFORMS: << parameters.platforms >>
            command: <<include(scripts/publish-docker.sh)>>
  - store_artifacts:
      path: ~/repo/dist
